
Practica2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077e  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060f  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <sumar>:
#include <stdint.h>

int8_t val = 0;

void sumar() {
	val++;
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	8f 5f       	subi	r24, 0xFF	; 255
  82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(val == 100) val = 99;
  86:	84 36       	cpi	r24, 0x64	; 100
  88:	19 f4       	brne	.+6      	; 0x90 <sumar+0x14>
  8a:	83 e6       	ldi	r24, 0x63	; 99
  8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	08 95       	ret

00000092 <restar>:
}

void restar() {
	val--;
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	81 50       	subi	r24, 0x01	; 1
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(val == -1) val = 0;
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	11 f4       	brne	.+4      	; 0xa4 <restar+0x12>
  a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	08 95       	ret

000000a6 <show>:
}

void show() {
	uint8_t u = val % 10;
  a6:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	38 02       	muls	r19, r24
  ae:	81 2d       	mov	r24, r1
  b0:	11 24       	eor	r1, r1
  b2:	85 95       	asr	r24
  b4:	85 95       	asr	r24
  b6:	43 2f       	mov	r20, r19
  b8:	44 0f       	add	r20, r20
  ba:	44 0b       	sbc	r20, r20
  bc:	98 2f       	mov	r25, r24
  be:	94 1b       	sub	r25, r20
  c0:	99 0f       	add	r25, r25
  c2:	29 2f       	mov	r18, r25
  c4:	22 0f       	add	r18, r18
  c6:	22 0f       	add	r18, r18
  c8:	92 0f       	add	r25, r18
  ca:	39 1b       	sub	r19, r25
	uint8_t d = val / 10;
  cc:	84 1b       	sub	r24, r20
	PORTD = (d + u * 16);
  ce:	20 e1       	ldi	r18, 0x10	; 16
  d0:	32 9f       	mul	r19, r18
  d2:	80 0d       	add	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	08 95       	ret

000000da <main>:
}

int main(void){
	DDRA = 0;
  da:	1a ba       	out	0x1a, r1	; 26
	PORTA = 255;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8b bb       	out	0x1b, r24	; 27
	DDRD = 255;
  e0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  e2:	12 ba       	out	0x12, r1	; 18
    while (1){
		if(!(PINA & 1)){
  e4:	c8 99       	sbic	0x19, 0	; 25
  e6:	12 c0       	rjmp	.+36     	; 0x10c <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x18>
  f2:	00 00       	nop
			_delay_ms(50);
			if(PINA & 1) continue;
  f4:	c8 99       	sbic	0x19, 0	; 25
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <main+0xa>
			sumar();
  f8:	0e 94 3e 00 	call	0x7c	; 0x7c <sumar>
			while (!(PINA & 1));
  fc:	c8 9b       	sbis	0x19, 0	; 25
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x22>
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x2a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x30>
 10a:	00 00       	nop
			_delay_ms(50);
		}
		if(!(PINA & (1<<7))){
 10c:	cf 99       	sbic	0x19, 7	; 25
 10e:	12 c0       	rjmp	.+36     	; 0x134 <main+0x5a>
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x3a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x40>
 11a:	00 00       	nop
			_delay_ms(50);
			if(PINA & (1<<7)) continue;
 11c:	cf 99       	sbic	0x19, 7	; 25
 11e:	e2 cf       	rjmp	.-60     	; 0xe4 <main+0xa>
			restar();
 120:	0e 94 49 00 	call	0x92	; 0x92 <restar>
			while (!(PINA & (1<<7)));
 124:	cf 9b       	sbis	0x19, 7	; 25
 126:	fe cf       	rjmp	.-4      	; 0x124 <main+0x4a>
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x52>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x58>
 132:	00 00       	nop
			_delay_ms(50);
		}
		show(); 
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <show>
 138:	d5 cf       	rjmp	.-86     	; 0xe4 <main+0xa>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
