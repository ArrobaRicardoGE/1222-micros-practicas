
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fa  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065f  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a9  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  54:	5e 00       	.word	0x005e	; ????
  56:	61 00       	.word	0x0061	; ????
  58:	64 00       	.word	0x0064	; ????
  5a:	67 00       	.word	0x0067	; ????
  5c:	6a 00       	.word	0x006a	; ????
  5e:	6d 00       	.word	0x006d	; ????
  60:	70 00       	.word	0x0070	; ????
  62:	73 00       	.word	0x0073	; ????
  64:	76 00       	.word	0x0076	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_clear_bss>:
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a0 36       	cpi	r26, 0x60	; 96
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  86:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <cero_en_bit>:

volatile uint8_t pos = 0;

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
  8e:	fc 01       	movw	r30, r24
  90:	80 81       	ld	r24, Z
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <cero_en_bit+0xc>
  96:	95 95       	asr	r25
  98:	87 95       	ror	r24
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <cero_en_bit+0x8>
  9e:	f1 e0       	ldi	r31, 0x01	; 1
  a0:	8f 27       	eor	r24, r31
}
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	08 95       	ret

000000a6 <change_pos>:

void change_pos() {
	switch(PORTD) {
  a6:	e2 b3       	in	r30, 0x12	; 18
  a8:	8e 2f       	mov	r24, r30
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	89 30       	cpi	r24, 0x09	; 9
  ae:	91 05       	cpc	r25, r1
  b0:	00 f5       	brcc	.+64     	; 0xf2 <change_pos+0x4c>
  b2:	fc 01       	movw	r30, r24
  b4:	e6 5d       	subi	r30, 0xD6	; 214
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__tablejump2__>
		case 0:
			OCR0 = 35;
  bc:	83 e2       	ldi	r24, 0x23	; 35
  be:	8c bf       	out	0x3c, r24	; 60
			break;
  c0:	08 95       	ret
		case 1:
			OCR0 = 48;
  c2:	80 e3       	ldi	r24, 0x30	; 48
  c4:	8c bf       	out	0x3c, r24	; 60
			break;
  c6:	08 95       	ret
		case 2:
			OCR0 = 61;
  c8:	8d e3       	ldi	r24, 0x3D	; 61
  ca:	8c bf       	out	0x3c, r24	; 60
			break;
  cc:	08 95       	ret
		case 3:
			OCR0 = 74;
  ce:	8a e4       	ldi	r24, 0x4A	; 74
  d0:	8c bf       	out	0x3c, r24	; 60
			break;
  d2:	08 95       	ret
		case 4:
			OCR0 = 88;
  d4:	88 e5       	ldi	r24, 0x58	; 88
  d6:	8c bf       	out	0x3c, r24	; 60
			break;
  d8:	08 95       	ret
		case 5:
			OCR0 = 101;
  da:	85 e6       	ldi	r24, 0x65	; 101
  dc:	8c bf       	out	0x3c, r24	; 60
			break;
  de:	08 95       	ret
		case 6:
			OCR0 = 114;
  e0:	82 e7       	ldi	r24, 0x72	; 114
  e2:	8c bf       	out	0x3c, r24	; 60
			break;
  e4:	08 95       	ret
		case 7:
			OCR0 = 127;
  e6:	8f e7       	ldi	r24, 0x7F	; 127
  e8:	8c bf       	out	0x3c, r24	; 60
			break;
  ea:	08 95       	ret
		case 8:
			OCR0 = 138;
  ec:	8a e8       	ldi	r24, 0x8A	; 138
  ee:	8c bf       	out	0x3c, r24	; 60
			break;
  f0:	08 95       	ret
		default:
			OCR0 = 148;
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	8c bf       	out	0x3c, r24	; 60
  f6:	08 95       	ret

000000f8 <read_kbd>:
	}
}

void read_kbd() {
	// enter
	PORTA = 0b11111110;
  f8:	8e ef       	ldi	r24, 0xFE	; 254
  fa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e4       	ldi	r24, 0x4F	; 79
  fe:	93 ec       	ldi	r25, 0xC3	; 195
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <read_kbd+0x8>
 104:	00 c0       	rjmp	.+0      	; 0x106 <read_kbd+0xe>
 106:	00 00       	nop
	_delay_ms(50);
	if(cero_en_bit(&PINA, 4)) 
 108:	64 e0       	ldi	r22, 0x04	; 4
 10a:	89 e3       	ldi	r24, 0x39	; 57
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 47 00 	call	0x8e	; 0x8e <cero_en_bit>
 112:	81 11       	cpse	r24, r1
		change_pos();
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <change_pos>
	while(cero_en_bit(&PINA, 4));
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	89 e3       	ldi	r24, 0x39	; 57
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 47 00 	call	0x8e	; 0x8e <cero_en_bit>
 122:	81 11       	cpse	r24, r1
 124:	f9 cf       	rjmp	.-14     	; 0x118 <read_kbd+0x20>
	
	// down
	PORTA = 0b11110111;
 126:	87 ef       	ldi	r24, 0xF7	; 247
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	8f e4       	ldi	r24, 0x4F	; 79
 12c:	93 ec       	ldi	r25, 0xC3	; 195
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <read_kbd+0x36>
 132:	00 c0       	rjmp	.+0      	; 0x134 <read_kbd+0x3c>
 134:	00 00       	nop
	_delay_ms(50);
	if(cero_en_bit(&PINA, 5))
 136:	65 e0       	ldi	r22, 0x05	; 5
 138:	89 e3       	ldi	r24, 0x39	; 57
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 47 00 	call	0x8e	; 0x8e <cero_en_bit>
 140:	88 23       	and	r24, r24
 142:	41 f0       	breq	.+16     	; 0x154 <read_kbd+0x5c>
		PORTD = (PORTD == 0 ? 0 : PORTD - 1);
 144:	82 b3       	in	r24, 0x12	; 18
 146:	88 23       	and	r24, r24
 148:	19 f0       	breq	.+6      	; 0x150 <read_kbd+0x58>
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <read_kbd+0x5a>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	82 bb       	out	0x12, r24	; 18
	while(cero_en_bit(&PINA, 5));
 154:	65 e0       	ldi	r22, 0x05	; 5
 156:	89 e3       	ldi	r24, 0x39	; 57
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 47 00 	call	0x8e	; 0x8e <cero_en_bit>
 15e:	81 11       	cpse	r24, r1
 160:	f9 cf       	rjmp	.-14     	; 0x154 <read_kbd+0x5c>
	
	// up
	PORTA = 0b11111101;
 162:	8d ef       	ldi	r24, 0xFD	; 253
 164:	8b bb       	out	0x1b, r24	; 27
 166:	8f e4       	ldi	r24, 0x4F	; 79
 168:	93 ec       	ldi	r25, 0xC3	; 195
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <read_kbd+0x72>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <read_kbd+0x78>
 170:	00 00       	nop
	_delay_ms(50);
	if(cero_en_bit(&PINA, 7))
 172:	67 e0       	ldi	r22, 0x07	; 7
 174:	89 e3       	ldi	r24, 0x39	; 57
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 47 00 	call	0x8e	; 0x8e <cero_en_bit>
 17c:	88 23       	and	r24, r24
 17e:	41 f0       	breq	.+16     	; 0x190 <read_kbd+0x98>
		PORTD = (PORTD == 9 ? 9 : PORTD + 1); 
 180:	82 b3       	in	r24, 0x12	; 18
 182:	89 30       	cpi	r24, 0x09	; 9
 184:	19 f0       	breq	.+6      	; 0x18c <read_kbd+0x94>
 186:	82 b3       	in	r24, 0x12	; 18
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	01 c0       	rjmp	.+2      	; 0x18e <read_kbd+0x96>
 18c:	89 e0       	ldi	r24, 0x09	; 9
 18e:	82 bb       	out	0x12, r24	; 18
	while(cero_en_bit(&PINA, 7));
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	89 e3       	ldi	r24, 0x39	; 57
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 47 00 	call	0x8e	; 0x8e <cero_en_bit>
 19a:	81 11       	cpse	r24, r1
 19c:	f9 cf       	rjmp	.-14     	; 0x190 <read_kbd+0x98>
	
}
 19e:	08 95       	ret

000001a0 <main>:


int main(void)
{
	// Puertos
    DDRA = 0b00001111;
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	8a bb       	out	0x1a, r24	; 26
	PORTA = 255;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	8b bb       	out	0x1b, r24	; 27
	DDRB = DDRD = 255;
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	87 bb       	out	0x17, r24	; 23
	
	// PWM
	TCCR0 = 0b01101011; // prescaler 64, fastpwm, inicia en 1
 1ac:	8b e6       	ldi	r24, 0x6B	; 107
 1ae:	83 bf       	out	0x33, r24	; 51
	OCR0 = 61; // iniciar en 0
 1b0:	8d e3       	ldi	r24, 0x3D	; 61
 1b2:	8c bf       	out	0x3c, r24	; 60
    while (1) 
    {
		read_kbd();
 1b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <read_kbd>
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <main+0x14>

000001ba <__tablejump2__>:
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	05 90       	lpm	r0, Z+
 1c0:	f4 91       	lpm	r31, Z
 1c2:	e0 2d       	mov	r30, r0
 1c4:	09 94       	ijmp

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
