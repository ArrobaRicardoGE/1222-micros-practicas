
Practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000673  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 81 00 	call	0x102	; 0x102 <main>
  7a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>

volatile int8_t dado = 1;

ISR(INT0_vect) {
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	switch(dado) {
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	99 f0       	breq	.+38     	; 0xbe <__vector_1+0x3c>
  98:	2c f4       	brge	.+10     	; 0xa4 <__vector_1+0x22>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	41 f0       	breq	.+16     	; 0xae <__vector_1+0x2c>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	51 f0       	breq	.+20     	; 0xb6 <__vector_1+0x34>
  a2:	1c c0       	rjmp	.+56     	; 0xdc <__vector_1+0x5a>
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	81 f0       	breq	.+32     	; 0xc8 <__vector_1+0x46>
  a8:	85 30       	cpi	r24, 0x05	; 5
  aa:	99 f0       	breq	.+38     	; 0xd2 <__vector_1+0x50>
  ac:	17 c0       	rjmp	.+46     	; 0xdc <__vector_1+0x5a>
		case 1:
			PORTA = 0b00010000;
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0;
  b2:	18 ba       	out	0x18, r1	; 24
			break;
  b4:	17 c0       	rjmp	.+46     	; 0xe4 <__vector_1+0x62>
		case 2:
			PORTA = 0b01000100;
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0;
  ba:	18 ba       	out	0x18, r1	; 24
			break;
  bc:	13 c0       	rjmp	.+38     	; 0xe4 <__vector_1+0x62>
		case 3:
			PORTA = 0b00010001;
  be:	81 e1       	ldi	r24, 0x11	; 17
  c0:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	88 bb       	out	0x18, r24	; 24
			break;
  c6:	0e c0       	rjmp	.+28     	; 0xe4 <__vector_1+0x62>
		case 4:
			PORTA = 0b01000101;
  c8:	85 e4       	ldi	r24, 0x45	; 69
  ca:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	88 bb       	out	0x18, r24	; 24
			break;
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <__vector_1+0x62>
		case 5:
			PORTA = 0b01010101;
  d2:	85 e5       	ldi	r24, 0x55	; 85
  d4:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	88 bb       	out	0x18, r24	; 24
			break;
  da:	04 c0       	rjmp	.+8      	; 0xe4 <__vector_1+0x62>
		default:
			PORTA = 0b01101101;
  dc:	8d e6       	ldi	r24, 0x6D	; 109
  de:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	88 bb       	out	0x18, r24	; 24
	}
	while(!(PIND & (1 << 2)));
  e4:	82 9b       	sbis	0x10, 2	; 16
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <__vector_1+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <__vector_1+0x6a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_1+0x70>
  f2:	00 00       	nop
	_delay_ms(50);
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:


int main(void)
{
    // Habilitar interrupciones
	sei();
 102:	78 94       	sei
	MCUCR |= 2;			// flanco de bajada
 104:	85 b7       	in	r24, 0x35	; 53
 106:	82 60       	ori	r24, 0x02	; 2
 108:	85 bf       	out	0x35, r24	; 53
	GIFR |= (1 << 6);	// limpiar bandera
 10a:	8a b7       	in	r24, 0x3a	; 58
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	8a bf       	out	0x3a, r24	; 58
	GICR |= (1 << 6);	// activar INT0
 110:	8b b7       	in	r24, 0x3b	; 59
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b bf       	out	0x3b, r24	; 59
	
	// Configurar puertos 
	DDRA = 255;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8a bb       	out	0x1a, r24	; 26
	DDRB = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0;
 11e:	11 ba       	out	0x11, r1	; 17
    while (1) 
    {
		dado = (dado == 6 ? 1 : dado + 1);
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	86 30       	cpi	r24, 0x06	; 6
 126:	21 f0       	breq	.+8      	; 0x130 <main+0x2e>
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	01 c0       	rjmp	.+2      	; 0x132 <main+0x30>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    }
 136:	f4 cf       	rjmp	.-24     	; 0x120 <main+0x1e>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
