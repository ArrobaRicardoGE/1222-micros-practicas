
Leader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063f  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bc  00000000  00000000  000007f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  00001337  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <transmit>:
#define DDRSS DDRA

 void transmit(uint8_t cData, uint8_t Device)
 {
	 /* Start transmission */
	 PORTSS = ~(1<<Device); // Pongo un 0 en el bit de SS
  6c:	21 e0       	ldi	r18, 0x01	; 1
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	02 c0       	rjmp	.+4      	; 0x76 <transmit+0xa>
  72:	22 0f       	add	r18, r18
  74:	33 1f       	adc	r19, r19
  76:	6a 95       	dec	r22
  78:	e2 f7       	brpl	.-8      	; 0x72 <transmit+0x6>
  7a:	20 95       	com	r18
  7c:	2b bb       	out	0x1b, r18	; 27
	 SPDR = cData; //Comiendo el envío de información
  7e:	8f b9       	out	0x0f, r24	; 15
	 /* Wait for transmission complete */
	 while(!(SPSR & (1<<SPIF)));
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <transmit+0x14>
	 PORTSS = 255; 
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8b bb       	out	0x1b, r24	; 27
  88:	08 95       	ret

0000008a <send_data>:
 }

void send_data() {
	transmit(0b11111110, 6);
  8a:	66 e0       	ldi	r22, 0x06	; 6
  8c:	8e ef       	ldi	r24, 0xFE	; 254
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <transmit>
	transmit(0b11110000, 7);
  92:	67 e0       	ldi	r22, 0x07	; 7
  94:	80 ef       	ldi	r24, 0xF0	; 240
  96:	0e 94 36 00 	call	0x6c	; 0x6c <transmit>
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
    DDRB |= (1 << MOSI)|(1 << SCK);
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	80 6a       	ori	r24, 0xA0	; 160
  a0:	87 bb       	out	0x17, r24	; 23
	PORTC = 255; 	
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	85 bb       	out	0x15, r24	; 21
	SPCR |= (1 << SPE)|(1 << MSTR); 
  a6:	9d b1       	in	r25, 0x0d	; 13
  a8:	90 65       	ori	r25, 0x50	; 80
  aa:	9d b9       	out	0x0d, r25	; 13
	DDRSS = 255; 
  ac:	8a bb       	out	0x1a, r24	; 26
	PORTSS = 255; 
  ae:	8b bb       	out	0x1b, r24	; 27
	
	while (1) 
    {
		if(!(PINC & 1)) {
  b0:	98 99       	sbic	0x13, 0	; 19
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x14>
			send_data(); 
  b4:	0e 94 45 00 	call	0x8a	; 0x8a <send_data>
			while(!(PINC & 1)); 
  b8:	98 9b       	sbis	0x13, 0	; 19
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x1c>
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <main+0x14>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
