
Follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000676  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d7  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <receive>:
#define SS 4

uint8_t receive()
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
  6c:	77 9b       	sbis	0x0e, 7	; 14
  6e:	fe cf       	rjmp	.-4      	; 0x6c <receive>
	/* Return data register */
	return SPDR;
  70:	8f b1       	in	r24, 0x0f	; 15
}
  72:	08 95       	ret

00000074 <main>:

int main(void)
{
    PORTB |= (1 << MISO); 
  74:	88 b3       	in	r24, 0x18	; 24
  76:	80 64       	ori	r24, 0x40	; 64
  78:	88 bb       	out	0x18, r24	; 24
	DDRC = 255;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	84 bb       	out	0x14, r24	; 20
	SPCR |= (1 << SPE);
  7e:	8d b1       	in	r24, 0x0d	; 13
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8d b9       	out	0x0d, r24	; 13
	
    while (1) 
    {
		uint8_t dato = receive(); 
  84:	0e 94 36 00 	call	0x6c	; 0x6c <receive>
		PORTC = dato; 
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	89 e6       	ldi	r24, 0x69	; 105
  8e:	98 e1       	ldi	r25, 0x18	; 24
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x1c>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x26>
  9a:	00 00       	nop
		_delay_ms(1000); 
		PORTC = 0; 
  9c:	15 ba       	out	0x15, r1	; 21
  9e:	f2 cf       	rjmp	.-28     	; 0x84 <main+0x10>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
