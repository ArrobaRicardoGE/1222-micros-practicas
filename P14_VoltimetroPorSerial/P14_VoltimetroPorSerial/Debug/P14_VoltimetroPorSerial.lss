
P14_VoltimetroPorSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d3  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000669  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000185b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <saca_uno>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>

void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
  6c:	fc 01       	movw	r30, r24
  6e:	40 81       	ld	r20, Z
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <saca_uno+0xe>
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	6a 95       	dec	r22
  7c:	e2 f7       	brpl	.-8      	; 0x76 <saca_uno+0xa>
  7e:	24 2b       	or	r18, r20
  80:	20 83       	st	Z, r18
  82:	08 95       	ret

00000084 <uno_en_bit>:
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return ((*LUGAR&(1<<BIT)));
  84:	fc 01       	movw	r30, r24
  86:	20 81       	ld	r18, Z
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <uno_en_bit+0xe>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <uno_en_bit+0xa>
}
  96:	82 23       	and	r24, r18
  98:	08 95       	ret

0000009a <lectura_adc>:

uint8_t lectura_adc(uint8_t adcbit) {
	ADMUX &= 0b11100000;
  9a:	97 b1       	in	r25, 0x07	; 7
  9c:	90 7e       	andi	r25, 0xE0	; 224
  9e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= adcbit;
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	89 2b       	or	r24, r25
  a4:	87 b9       	out	0x07, r24	; 7
	saca_uno(&ADCSRA, 6);
  a6:	66 e0       	ldi	r22, 0x06	; 6
  a8:	86 e2       	ldi	r24, 0x26	; 38
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <saca_uno>
	while(uno_en_bit(&ADCSRA, 6));
  b0:	66 e0       	ldi	r22, 0x06	; 6
  b2:	86 e2       	ldi	r24, 0x26	; 38
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 42 00 	call	0x84	; 0x84 <uno_en_bit>
  ba:	81 11       	cpse	r24, r1
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <lectura_adc+0x16>
	return ADCH;
  be:	85 b1       	in	r24, 0x05	; 5
}
  c0:	08 95       	ret

000000c2 <mandar_serial>:

void mandar_serial(uint8_t dato) {
	UDR = dato; 
  c2:	8c b9       	out	0x0c, r24	; 12
	while(!uno_en_bit(&UCSRA, 6)); 
  c4:	66 e0       	ldi	r22, 0x06	; 6
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 42 00 	call	0x84	; 0x84 <uno_en_bit>
  ce:	88 23       	and	r24, r24
  d0:	c9 f3       	breq	.-14     	; 0xc4 <mandar_serial+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <mandar_serial+0x14>
  da:	00 c0       	rjmp	.+0      	; 0xdc <mandar_serial+0x1a>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{	
	// ADC
	ADMUX = 0b01100000;
  e0:	80 e6       	ldi	r24, 0x60	; 96
  e2:	87 b9       	out	0x07, r24	; 7
	SFIOR = 0;
  e4:	10 be       	out	0x30, r1	; 48
	ADCSRA = 0b10010100;
  e6:	84 e9       	ldi	r24, 0x94	; 148
  e8:	86 b9       	out	0x06, r24	; 6
	
	// Serial
	uint8_t ubrr = MYUBRR;
	DDRD |= (1<<1);        //TX de salida (D1) y RX de entrada (D0)
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	81 bb       	out	0x11, r24	; 17
	UBRRH = (uint8_t) (ubrr>>8);
  f0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t) (ubrr);
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	8a b9       	out	0x0a, r24	; 10
	//habilité transmisión
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0)|(1<<USBS);
  fa:	8e e8       	ldi	r24, 0x8E	; 142
  fc:	80 bd       	out	0x20, r24	; 32
	//paquetes de 8 bits, con 2 bits de parada, sin paridad
	
	uint8_t r = lectura_adc(2), c; 
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 4d 00 	call	0x9a	; 0x9a <lectura_adc>
 104:	d8 2f       	mov	r29, r24
	mandar_serial(r);
 106:	0e 94 61 00 	call	0xc2	; 0xc2 <mandar_serial>
 10a:	01 c0       	rjmp	.+2      	; 0x10e <main+0x2e>
 10c:	dc 2f       	mov	r29, r28
	while (1)
	{
		c = r; 
		r = lectura_adc(2); 
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 4d 00 	call	0x9a	; 0x9a <lectura_adc>
 114:	c8 2f       	mov	r28, r24
		if(r != c) mandar_serial(r); 
 116:	d8 17       	cp	r29, r24
 118:	c9 f3       	breq	.-14     	; 0x10c <main+0x2c>
 11a:	0e 94 61 00 	call	0xc2	; 0xc2 <mandar_serial>
 11e:	f6 cf       	rjmp	.-20     	; 0x10c <main+0x2c>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
