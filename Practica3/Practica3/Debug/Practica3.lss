
Practica3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bd  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042f  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f8  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 18 01 	call	0x230	; 0x230 <main>
  74:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <cero_en_bit>:

uint8_t vals[5];

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
  7c:	fc 01       	movw	r30, r24
  7e:	80 81       	ld	r24, Z
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <cero_en_bit+0xc>
  84:	95 95       	asr	r25
  86:	87 95       	ror	r24
  88:	6a 95       	dec	r22
  8a:	e2 f7       	brpl	.-8      	; 0x84 <cero_en_bit+0x8>
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	8f 27       	eor	r24, r31
}
  90:	81 70       	andi	r24, 0x01	; 1
  92:	08 95       	ret

00000094 <show_digits>:

void show_digits() {
	PORTC = (vals[1] << 4) + vals[0];
  94:	e0 e6       	ldi	r30, 0x60	; 96
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	91 81       	ldd	r25, Z+1	; 0x01
  9a:	80 81       	ld	r24, Z
  9c:	20 e1       	ldi	r18, 0x10	; 16
  9e:	92 9f       	mul	r25, r18
  a0:	80 0d       	add	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	85 bb       	out	0x15, r24	; 21
	PORTD = (vals[3] << 4) + vals[2];
  a6:	93 81       	ldd	r25, Z+3	; 0x03
  a8:	82 81       	ldd	r24, Z+2	; 0x02
  aa:	20 e1       	ldi	r18, 0x10	; 16
  ac:	92 9f       	mul	r25, r18
  ae:	80 0d       	add	r24, r0
  b0:	11 24       	eor	r1, r1
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret

000000b6 <register_value>:
}

void register_value(uint8_t val) {
	if(val == 10){
  b6:	8a 30       	cpi	r24, 0x0A	; 10
  b8:	49 f0       	breq	.+18     	; 0xcc <register_value+0x16>
  ba:	24 e0       	ldi	r18, 0x04	; 4
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	18 c0       	rjmp	.+48     	; 0xf0 <register_value+0x3a>
		for(int i = 0; i < 4; i++)
			vals[i] = 0;
  c0:	fc 01       	movw	r30, r24
  c2:	e0 5a       	subi	r30, 0xA0	; 160
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	10 82       	st	Z, r1
	PORTD = (vals[3] << 4) + vals[2];
}

void register_value(uint8_t val) {
	if(val == 10){
		for(int i = 0; i < 4; i++)
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <register_value+0x1a>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	91 05       	cpc	r25, r1
  d4:	ac f3       	brlt	.-22     	; 0xc0 <register_value+0xa>
  d6:	11 c0       	rjmp	.+34     	; 0xfa <register_value+0x44>
			vals[i] = 0;
	} else {
		for(int i = 4; i > 0; i--)
			vals[i] = vals[i - 1];
  d8:	a9 01       	movw	r20, r18
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	51 09       	sbc	r21, r1
  de:	fa 01       	movw	r30, r20
  e0:	e0 5a       	subi	r30, 0xA0	; 160
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	90 81       	ld	r25, Z
  e6:	f9 01       	movw	r30, r18
  e8:	e0 5a       	subi	r30, 0xA0	; 160
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	90 83       	st	Z, r25
void register_value(uint8_t val) {
	if(val == 10){
		for(int i = 0; i < 4; i++)
			vals[i] = 0;
	} else {
		for(int i = 4; i > 0; i--)
  ee:	9a 01       	movw	r18, r20
  f0:	12 16       	cp	r1, r18
  f2:	13 06       	cpc	r1, r19
  f4:	8c f3       	brlt	.-30     	; 0xd8 <register_value+0x22>
			vals[i] = vals[i - 1];
		vals[0] = val;
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	show_digits();
  fa:	0e 94 4a 00 	call	0x94	; 0x94 <show_digits>
  fe:	08 95       	ret

00000100 <read_kbd>:
}

void read_kbd() {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	// primera columna
	PORTA = 0b11111110;
 104:	8e ef       	ldi	r24, 0xFE	; 254
 106:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <read_kbd+0xc>
 110:	00 c0       	rjmp	.+0      	; 0x112 <read_kbd+0x12>
 112:	00 00       	nop
	_delay_ms(50); 
	for(uint8_t i = 4; i <= 7; i++ ){
 114:	c4 e0       	ldi	r28, 0x04	; 4
 116:	12 c0       	rjmp	.+36     	; 0x13c <read_kbd+0x3c>
		if(cero_en_bit(&PINA, i)) {
 118:	6c 2f       	mov	r22, r28
 11a:	89 e3       	ldi	r24, 0x39	; 57
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 122:	88 23       	and	r24, r24
 124:	51 f0       	breq	.+20     	; 0x13a <read_kbd+0x3a>
			register_value(10);
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <register_value>
			while(cero_en_bit(&PINA, i));
 12c:	6c 2f       	mov	r22, r28
 12e:	89 e3       	ldi	r24, 0x39	; 57
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 136:	81 11       	cpse	r24, r1
 138:	f9 cf       	rjmp	.-14     	; 0x12c <read_kbd+0x2c>

void read_kbd() {
	// primera columna
	PORTA = 0b11111110;
	_delay_ms(50); 
	for(uint8_t i = 4; i <= 7; i++ ){
 13a:	cf 5f       	subi	r28, 0xFF	; 255
 13c:	c8 30       	cpi	r28, 0x08	; 8
 13e:	60 f3       	brcs	.-40     	; 0x118 <read_kbd+0x18>
			register_value(10);
			while(cero_en_bit(&PINA, i));
		}
	}
	// segunda columna
	PORTA = 0b11111101;
 140:	8d ef       	ldi	r24, 0xFD	; 253
 142:	8b bb       	out	0x1b, r24	; 27
 144:	83 ed       	ldi	r24, 0xD3	; 211
 146:	90 e3       	ldi	r25, 0x30	; 48
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <read_kbd+0x48>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <read_kbd+0x4e>
 14e:	00 00       	nop
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
 150:	c4 e0       	ldi	r28, 0x04	; 4
 152:	1a c0       	rjmp	.+52     	; 0x188 <read_kbd+0x88>
		uint8_t val = (i - 4) * 3;
 154:	8c 2f       	mov	r24, r28
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	04 97       	sbiw	r24, 0x04	; 4
 15a:	d8 2f       	mov	r29, r24
 15c:	dd 0f       	add	r29, r29
 15e:	d8 0f       	add	r29, r24
		if(!val) val = 10;
 160:	09 f4       	brne	.+2      	; 0x164 <read_kbd+0x64>
 162:	da e0       	ldi	r29, 0x0A	; 10
		if(cero_en_bit(&PINA, i)) {
 164:	6c 2f       	mov	r22, r28
 166:	89 e3       	ldi	r24, 0x39	; 57
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 16e:	88 23       	and	r24, r24
 170:	51 f0       	breq	.+20     	; 0x186 <read_kbd+0x86>
			register_value(val);
 172:	8d 2f       	mov	r24, r29
 174:	0e 94 5b 00 	call	0xb6	; 0xb6 <register_value>
			while(cero_en_bit(&PINA, i));
 178:	6c 2f       	mov	r22, r28
 17a:	89 e3       	ldi	r24, 0x39	; 57
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 182:	81 11       	cpse	r24, r1
 184:	f9 cf       	rjmp	.-14     	; 0x178 <read_kbd+0x78>
		}
	}
	// segunda columna
	PORTA = 0b11111101;
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
 186:	cf 5f       	subi	r28, 0xFF	; 255
 188:	c8 30       	cpi	r28, 0x08	; 8
 18a:	20 f3       	brcs	.-56     	; 0x154 <read_kbd+0x54>
			register_value(val);
			while(cero_en_bit(&PINA, i));
		}
	}
	// tercera columna
	PORTA = 0b11111011;
 18c:	8b ef       	ldi	r24, 0xFB	; 251
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <read_kbd+0x94>
 198:	00 c0       	rjmp	.+0      	; 0x19a <read_kbd+0x9a>
 19a:	00 00       	nop
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
 19c:	d4 e0       	ldi	r29, 0x04	; 4
 19e:	1a c0       	rjmp	.+52     	; 0x1d4 <read_kbd+0xd4>
		uint8_t val = (i - 4) * 3;
 1a0:	8d 2f       	mov	r24, r29
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	04 97       	sbiw	r24, 0x04	; 4
 1a6:	c8 2f       	mov	r28, r24
 1a8:	cc 0f       	add	r28, r28
 1aa:	c8 0f       	add	r28, r24
		if(val) val--;
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <read_kbd+0xb0>
 1ae:	c1 50       	subi	r28, 0x01	; 1
		if(cero_en_bit(&PINA, i)) {
 1b0:	6d 2f       	mov	r22, r29
 1b2:	89 e3       	ldi	r24, 0x39	; 57
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 1ba:	88 23       	and	r24, r24
 1bc:	51 f0       	breq	.+20     	; 0x1d2 <read_kbd+0xd2>
			register_value(val);
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <register_value>
			while(cero_en_bit(&PINA, i));
 1c4:	6d 2f       	mov	r22, r29
 1c6:	89 e3       	ldi	r24, 0x39	; 57
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 1ce:	81 11       	cpse	r24, r1
 1d0:	f9 cf       	rjmp	.-14     	; 0x1c4 <read_kbd+0xc4>
		}
	}
	// tercera columna
	PORTA = 0b11111011;
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
 1d2:	df 5f       	subi	r29, 0xFF	; 255
 1d4:	d8 30       	cpi	r29, 0x08	; 8
 1d6:	20 f3       	brcs	.-56     	; 0x1a0 <read_kbd+0xa0>
			register_value(val);
			while(cero_en_bit(&PINA, i));
		}
	}
	// cuarta columna
	PORTA = 0b11110111;
 1d8:	87 ef       	ldi	r24, 0xF7	; 247
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	83 ed       	ldi	r24, 0xD3	; 211
 1de:	90 e3       	ldi	r25, 0x30	; 48
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <read_kbd+0xe0>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <read_kbd+0xe6>
 1e6:	00 00       	nop
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
 1e8:	d4 e0       	ldi	r29, 0x04	; 4
 1ea:	1d c0       	rjmp	.+58     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		uint8_t val = (i - 4) * 3;
 1ec:	8d 2f       	mov	r24, r29
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	04 97       	sbiw	r24, 0x04	; 4
 1f2:	98 2f       	mov	r25, r24
 1f4:	99 0f       	add	r25, r25
 1f6:	89 0f       	add	r24, r25
		if(!val) val = 10;
 1f8:	19 f0       	breq	.+6      	; 0x200 <__EEPROM_REGION_LENGTH__>
		else val -= 2; 
 1fa:	ce ef       	ldi	r28, 0xFE	; 254
 1fc:	c8 0f       	add	r28, r24
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
	// cuarta columna
	PORTA = 0b11110111;
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
		uint8_t val = (i - 4) * 3;
		if(!val) val = 10;
 200:	ca e0       	ldi	r28, 0x0A	; 10
		else val -= 2; 
		if(cero_en_bit(&PINA, i)) {
 202:	6d 2f       	mov	r22, r29
 204:	89 e3       	ldi	r24, 0x39	; 57
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 20c:	88 23       	and	r24, r24
 20e:	51 f0       	breq	.+20     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
			register_value(val);
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 5b 00 	call	0xb6	; 0xb6 <register_value>
			while(cero_en_bit(&PINA, i));
 216:	6d 2f       	mov	r22, r29
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 220:	81 11       	cpse	r24, r1
 222:	f9 cf       	rjmp	.-14     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
		}
	}
	// cuarta columna
	PORTA = 0b11110111;
	_delay_ms(50);
	for(uint8_t i = 4; i <= 7; i++ ){
 224:	df 5f       	subi	r29, 0xFF	; 255
 226:	d8 30       	cpi	r29, 0x08	; 8
 228:	08 f3       	brcs	.-62     	; 0x1ec <read_kbd+0xec>
		if(cero_en_bit(&PINA, i)) {
			register_value(val);
			while(cero_en_bit(&PINA, i));
		}
	}
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <main>:

int main(void)
{
    DDRA = 0b00001111;
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	8a bb       	out	0x1a, r24	; 26
	PORTA = 255;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	8b bb       	out	0x1b, r24	; 27
	DDRC = DDRD = 255;
 238:	81 bb       	out	0x11, r24	; 17
 23a:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		read_kbd();
 23c:	0e 94 80 00 	call	0x100	; 0x100 <read_kbd>
 240:	fd cf       	rjmp	.-6      	; 0x23c <main+0xc>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
