
P07_Juego.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fb  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000430  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000184  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  7a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <config_kbd>:
	{-1, 1, 4, 7},
};


void config_kbd() {
	DDRKBD = 0b00001111;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	8a bb       	out	0x1a, r24	; 26
	PORTKBD = 255;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	08 95       	ret

0000008c <read_kbd>:
}

int8_t read_kbd() {
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
	int8_t reading = -1;
  9a:	dd 24       	eor	r13, r13
  9c:	da 94       	dec	r13
	
	while(reading == -1) {
  9e:	3f c0       	rjmp	.+126    	; 0x11e <read_kbd+0x92>
		for(uint8_t i = 0; i < KBD_NCOLS; i++) {
			PORTKBD = 0b11111111 ^ (1 << cols[i]);
  a0:	e0 2e       	mov	r14, r16
  a2:	f1 2c       	mov	r15, r1
  a4:	f7 01       	movw	r30, r14
  a6:	ec 58       	subi	r30, 0x8C	; 140
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <read_kbd+0x2a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <read_kbd+0x26>
  ba:	80 95       	com	r24
  bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <read_kbd+0x36>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <read_kbd+0x3c>
  c8:	00 00       	nop
			_delay_ms(50);
			for(uint8_t j = 0; j < KBD_NROWS; j++){
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	21 c0       	rjmp	.+66     	; 0x110 <read_kbd+0x84>
				if(cero_en_bit(&PINKBD, rows[j])) {
  ce:	c1 2f       	mov	r28, r17
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	fe 01       	movw	r30, r28
  d4:	e0 59       	subi	r30, 0x90	; 144
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	60 81       	ld	r22, Z
  da:	89 e3       	ldi	r24, 0x39	; 57
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 a3 00 	call	0x146	; 0x146 <cero_en_bit>
  e2:	88 23       	and	r24, r24
  e4:	a1 f0       	breq	.+40     	; 0x10e <read_kbd+0x82>
					reading = values[i][j];
  e6:	f7 01       	movw	r30, r14
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	d0 80       	ld	r13, Z
					while(cero_en_bit(&PINKBD, rows[j]));
  fa:	fe 01       	movw	r30, r28
  fc:	e0 59       	subi	r30, 0x90	; 144
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	60 81       	ld	r22, Z
 102:	89 e3       	ldi	r24, 0x39	; 57
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 a3 00 	call	0x146	; 0x146 <cero_en_bit>
 10a:	81 11       	cpse	r24, r1
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <read_kbd+0x6e>
	
	while(reading == -1) {
		for(uint8_t i = 0; i < KBD_NCOLS; i++) {
			PORTKBD = 0b11111111 ^ (1 << cols[i]);
			_delay_ms(50);
			for(uint8_t j = 0; j < KBD_NROWS; j++){
 10e:	1f 5f       	subi	r17, 0xFF	; 255
 110:	14 30       	cpi	r17, 0x04	; 4
 112:	e8 f2       	brcs	.-70     	; 0xce <read_kbd+0x42>

int8_t read_kbd() {
	int8_t reading = -1;
	
	while(reading == -1) {
		for(uint8_t i = 0; i < KBD_NCOLS; i++) {
 114:	0f 5f       	subi	r16, 0xFF	; 255
 116:	01 c0       	rjmp	.+2      	; 0x11a <read_kbd+0x8e>
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	04 30       	cpi	r16, 0x04	; 4
 11c:	08 f2       	brcs	.-126    	; 0xa0 <read_kbd+0x14>
}

int8_t read_kbd() {
	int8_t reading = -1;
	
	while(reading == -1) {
 11e:	9f ef       	ldi	r25, 0xFF	; 255
 120:	d9 16       	cp	r13, r25
 122:	d1 f3       	breq	.-12     	; 0x118 <read_kbd+0x8c>
			}
		}
	}
	
	return reading;
 124:	8d 2d       	mov	r24, r13
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	08 95       	ret

00000136 <main>:


int main(void)
{
    /* Replace with your application code */
	config_kbd();
 136:	0e 94 41 00 	call	0x82	; 0x82 <config_kbd>
	DDRB = 255;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		int8_t r = read_kbd();
 13e:	0e 94 46 00 	call	0x8c	; 0x8c <read_kbd>
		PORTB = r;  
 142:	88 bb       	out	0x18, r24	; 24
 144:	fc cf       	rjmp	.-8      	; 0x13e <main+0x8>

00000146 <cero_en_bit>:
#include "util.h"

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <cero_en_bit+0xc>
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <cero_en_bit+0x8>
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8f 27       	eor	r24, r31
}
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
