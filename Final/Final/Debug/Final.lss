
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004d8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013bc  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000882  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000080e  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085e  00000000  00000000  0000302f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000388d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  7a:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <busy_flag>:
	saca_cero(&PORTLCD, E);
	busy_flag();
}

void busy_flag(void){
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo demás salida
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	8a bb       	out	0x1a, r24	; 26
	saca_cero(&PORTLCD,RS);// Instrucción
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	8b e3       	ldi	r24, 0x3B	; 59
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
  92:	65 e0       	ldi	r22, 0x05	; 5
  94:	8b e3       	ldi	r24, 0x3B	; 59
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
  9c:	66 e0       	ldi	r22, 0x06	; 6
  9e:	8b e3       	ldi	r24, 0x3B	; 59
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <busy_flag+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <busy_flag+0x2e>
  b0:	00 00       	nop
		_delay_ms(1);
		saca_cero(&PORTLCD,E);
  b2:	66 e0       	ldi	r22, 0x06	; 6
  b4:	8b e3       	ldi	r24, 0x3B	; 59
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
		if(uno_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para proteus, 0 para la vida real
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	89 e3       	ldi	r24, 0x39	; 57
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 46 02 	call	0x48c	; 0x48c <uno_en_bit>
  c6:	81 11       	cpse	r24, r1
  c8:	12 c0       	rjmp	.+36     	; 0xee <busy_flag+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	00 00       	nop
		_delay_us(1);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
  cc:	66 e0       	ldi	r22, 0x06	; 6
  ce:	8b e3       	ldi	r24, 0x3B	; 59
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <busy_flag+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <busy_flag+0x5e>
  e0:	00 00       	nop
		_delay_ms(1);
		saca_cero(&PORTLCD,E);
  e2:	66 e0       	ldi	r22, 0x06	; 6
  e4:	8b e3       	ldi	r24, 0x3B	; 59
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	}
  ec:	d7 cf       	rjmp	.-82     	; 0x9c <busy_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
  ee:	66 e0       	ldi	r22, 0x06	; 6
  f0:	8b e3       	ldi	r24, 0x3B	; 59
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
  f8:	89 ef       	ldi	r24, 0xF9	; 249
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <busy_flag+0x7a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <busy_flag+0x80>
 102:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD,E);
 104:	66 e0       	ldi	r22, 0x06	; 6
 106:	8b e3       	ldi	r24, 0x3B	; 59
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 10e:	64 e0       	ldi	r22, 0x04	; 4
 110:	8b e3       	ldi	r24, 0x3B	; 59
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_cero(&PORTLCD,RW);
 118:	65 e0       	ldi	r22, 0x05	; 5
 11a:	8b e3       	ldi	r24, 0x3B	; 59
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);// 0b0111_1111
 122:	8a b3       	in	r24, 0x1a	; 26
 124:	8f 67       	ori	r24, 0x7F	; 127
 126:	8a bb       	out	0x1a, r24	; 26
 128:	08 95       	ret

0000012a <LCD_WR_CHAR>:
	LCD_CMD_8BIT(LCD_Cmd_Clear); //limpia el display
	LCD_CMD_8BIT(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_CMD_8BIT(LCD_Cmd_OnsCsB); //Enciende el display
	LCD_CMD_8BIT(0b10000000); //Write data
}
void LCD_WR_CHAR(uint8_t dato){
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
	PORTLCD = dato>>4;
 12e:	82 95       	swap	r24
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	8b bb       	out	0x1b, r24	; 27
	saca_uno(&PORTLCD, RS);
 134:	64 e0       	ldi	r22, 0x04	; 4
 136:	8b e3       	ldi	r24, 0x3B	; 59
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
	saca_cero(&PORTLCD, RW);
 13e:	65 e0       	ldi	r22, 0x05	; 5
 140:	8b e3       	ldi	r24, 0x3B	; 59
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_uno(&PORTLCD, E);
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	8b e3       	ldi	r24, 0x3B	; 59
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_WR_CHAR+0x2c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_WR_CHAR+0x32>
 15c:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 15e:	66 e0       	ldi	r22, 0x06	; 6
 160:	8b e3       	ldi	r24, 0x3B	; 59
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	PORTLCD = dato & 0b00001111;
 168:	cf 70       	andi	r28, 0x0F	; 15
 16a:	cb bb       	out	0x1b, r28	; 27
	saca_uno(&PORTLCD, RS);
 16c:	64 e0       	ldi	r22, 0x04	; 4
 16e:	8b e3       	ldi	r24, 0x3B	; 59
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
	saca_cero(&PORTLCD, RW);
 176:	65 e0       	ldi	r22, 0x05	; 5
 178:	8b e3       	ldi	r24, 0x3B	; 59
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_uno(&PORTLCD, E);
 180:	66 e0       	ldi	r22, 0x06	; 6
 182:	8b e3       	ldi	r24, 0x3B	; 59
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
 18a:	89 ef       	ldi	r24, 0xF9	; 249
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_WR_CHAR+0x64>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_WR_CHAR+0x6a>
 194:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 196:	66 e0       	ldi	r22, 0x06	; 6
 198:	8b e3       	ldi	r24, 0x3B	; 59
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	busy_flag();
 1a0:	0e 94 41 00 	call	0x82	; 0x82 <busy_flag>
}
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCD_WR_string>:
#include "lcd.h"

void LCD_WR_string(volatile char *s){
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	fc 01       	movw	r30, r24
	char c;
	while((c=*s++)){
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <LCD_WR_string+0xe>
		LCD_WR_CHAR(c);
 1b0:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_WR_CHAR>
#include "lcd.h"

void LCD_WR_string(volatile char *s){
	char c;
	while((c=*s++)){
 1b4:	fe 01       	movw	r30, r28
 1b6:	ef 01       	movw	r28, r30
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	80 81       	ld	r24, Z
 1bc:	81 11       	cpse	r24, r1
 1be:	f8 cf       	rjmp	.-16     	; 0x1b0 <LCD_WR_string+0x8>
		LCD_WR_CHAR(c);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <LCD_CMD_4BIT>:
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
	busy_flag();
}
void LCD_CMD_4BIT(uint8_t instruction){
	PORTLCD=instruction;
 1c6:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD, RS);
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	8b e3       	ldi	r24, 0x3B	; 59
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_cero(&PORTLCD, RW);
 1d2:	65 e0       	ldi	r22, 0x05	; 5
 1d4:	8b e3       	ldi	r24, 0x3B	; 59
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_uno(&PORTLCD, E);
 1dc:	66 e0       	ldi	r22, 0x06	; 6
 1de:	8b e3       	ldi	r24, 0x3B	; 59
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
 1e6:	83 ec       	ldi	r24, 0xC3	; 195
 1e8:	99 e0       	ldi	r25, 0x09	; 9
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_CMD_4BIT+0x24>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_CMD_4BIT+0x2a>
 1f0:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD, E);
 1f2:	66 e0       	ldi	r22, 0x06	; 6
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	busy_flag();
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <busy_flag>
 200:	08 95       	ret

00000202 <LCD_CMD_8BIT>:
}
void LCD_CMD_8BIT(uint8_t instruction){
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
	// 0bxxxx_yyyy = VAR;
	// var = var >> 4;
	//var = 0b0000_xxxx;
	
	//Parte más significativa
	PORTLCD = instruction >> 4;
 206:	82 95       	swap	r24
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD, RS);
 20c:	64 e0       	ldi	r22, 0x04	; 4
 20e:	8b e3       	ldi	r24, 0x3B	; 59
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_cero(&PORTLCD, RW);
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	8b e3       	ldi	r24, 0x3B	; 59
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_uno(&PORTLCD, E);
 220:	66 e0       	ldi	r22, 0x06	; 6
 222:	8b e3       	ldi	r24, 0x3B	; 59
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_CMD_8BIT+0x2c>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_CMD_8BIT+0x32>
 234:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 236:	66 e0       	ldi	r22, 0x06	; 6
 238:	8b e3       	ldi	r24, 0x3B	; 59
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	
	//Parte menos significativa
	PORTLCD = instruction & 0b00001111;
 240:	cf 70       	andi	r28, 0x0F	; 15
 242:	cb bb       	out	0x1b, r28	; 27
	saca_cero(&PORTLCD, RS);
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	8b e3       	ldi	r24, 0x3B	; 59
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_cero(&PORTLCD, RW);
 24e:	65 e0       	ldi	r22, 0x05	; 5
 250:	8b e3       	ldi	r24, 0x3B	; 59
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	saca_uno(&PORTLCD, E);
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <saca_uno>
 262:	89 ef       	ldi	r24, 0xF9	; 249
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_CMD_8BIT+0x64>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_CMD_8BIT+0x6a>
 26c:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 26e:	66 e0       	ldi	r22, 0x06	; 6
 270:	8b e3       	ldi	r24, 0x3B	; 59
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 5d 02 	call	0x4ba	; 0x4ba <saca_cero>
	busy_flag();
 278:	0e 94 41 00 	call	0x82	; 0x82 <busy_flag>
}
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <LCD_inicialization>:
		LCD_WR_CHAR(c);
	}
}

void LCD_inicialization(void){
	DDRLCD = 0b01111111; //0b0111_1111;
 280:	8f e7       	ldi	r24, 0x7F	; 127
 282:	8a bb       	out	0x1a, r24	; 26
 284:	8f e9       	ldi	r24, 0x9F	; 159
 286:	9f e0       	ldi	r25, 0x0F	; 15
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_inicialization+0x8>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_inicialization+0xe>
 28e:	00 00       	nop
	//Basic LCD INIT
	_delay_ms(16);
	LCD_CMD_4BIT(0b00000011);
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_CMD_4BIT>
 296:	89 e1       	ldi	r24, 0x19	; 25
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_inicialization+0x1a>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_inicialization+0x20>
 2a0:	00 00       	nop
	_delay_ms(4.2);
	LCD_CMD_4BIT(0b00000011);
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_CMD_4BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	91 e2       	ldi	r25, 0x21	; 33
 2aa:	9a 95       	dec	r25
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_inicialization+0x2a>
 2ae:	00 00       	nop
	_delay_us(100);
	LCD_CMD_4BIT(0b00000011);
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_CMD_4BIT>
 2b6:	81 e2       	ldi	r24, 0x21	; 33
 2b8:	8a 95       	dec	r24
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_inicialization+0x38>
 2bc:	00 00       	nop
	_delay_us(100);
	LCD_CMD_4BIT(0b00000010);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_CMD_4BIT>
 2c4:	91 e2       	ldi	r25, 0x21	; 33
 2c6:	9a 95       	dec	r25
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_inicialization+0x46>
 2ca:	00 00       	nop
	_delay_us(100);
	//Full LCD INIT
	LCD_CMD_8BIT(LCD_Cmd_Func2Lin); //4 Bits, número de líneas y tipo de letra
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_Off); //apaga el display
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_Clear); //limpia el display
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_ModeDnS); //Entry mode set ID S
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_OnsCsB); //Enciende el display
 2e4:	8c e0       	ldi	r24, 0x0C	; 12
 2e6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(0b10000000); //Write data
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
 2f0:	08 95       	ret

000002f2 <show_number>:
#include <util/delay.h>
#include <stdint.h>
#include "util.h"
#include "lcd.h"

void show_number(uint8_t x, uint8_t ret) {
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <show_number+0x6>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <show_number+0x8>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
	//for(int i = 0; i < ret; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftL); 
	int pad = 3; 
	char ans[pad + 1]; 
	ans[pad--] = 0;
 2fe:	1c 82       	std	Y+4, r1	; 0x04
 300:	22 e0       	ldi	r18, 0x02	; 2
 302:	30 e0       	ldi	r19, 0x00	; 0
	while(x > 0) {
 304:	19 c0       	rjmp	.+50     	; 0x338 <show_number+0x46>
		ans[pad--] = (x % 10) + '0';
 306:	e1 e0       	ldi	r30, 0x01	; 1
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ec 0f       	add	r30, r28
 30c:	fd 1f       	adc	r31, r29
 30e:	e2 0f       	add	r30, r18
 310:	f3 1f       	adc	r31, r19
 312:	9d ec       	ldi	r25, 0xCD	; 205
 314:	89 9f       	mul	r24, r25
 316:	91 2d       	mov	r25, r1
 318:	11 24       	eor	r1, r1
 31a:	96 95       	lsr	r25
 31c:	96 95       	lsr	r25
 31e:	96 95       	lsr	r25
 320:	59 2f       	mov	r21, r25
 322:	55 0f       	add	r21, r21
 324:	45 2f       	mov	r20, r21
 326:	44 0f       	add	r20, r20
 328:	44 0f       	add	r20, r20
 32a:	45 0f       	add	r20, r21
 32c:	84 1b       	sub	r24, r20
 32e:	80 5d       	subi	r24, 0xD0	; 208
 330:	80 83       	st	Z, r24
		x /= 10;
 332:	89 2f       	mov	r24, r25
	//for(int i = 0; i < ret; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftL); 
	int pad = 3; 
	char ans[pad + 1]; 
	ans[pad--] = 0;
	while(x > 0) {
		ans[pad--] = (x % 10) + '0';
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
void show_number(uint8_t x, uint8_t ret) {
	//for(int i = 0; i < ret; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftL); 
	int pad = 3; 
	char ans[pad + 1]; 
	ans[pad--] = 0;
	while(x > 0) {
 338:	81 11       	cpse	r24, r1
 33a:	e5 cf       	rjmp	.-54     	; 0x306 <show_number+0x14>
 33c:	0a c0       	rjmp	.+20     	; 0x352 <show_number+0x60>
		ans[pad--] = (x % 10) + '0';
		x /= 10;
	}
	while(pad >= 0) {
		ans[pad--] = '0'; 
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	80 83       	st	Z, r24
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	31 09       	sbc	r19, r1
	ans[pad--] = 0;
	while(x > 0) {
		ans[pad--] = (x % 10) + '0';
		x /= 10;
	}
	while(pad >= 0) {
 352:	33 23       	and	r19, r19
 354:	a4 f7       	brge	.-24     	; 0x33e <show_number+0x4c>
		ans[pad--] = '0'; 
	}
	LCD_WR_string(ans); 
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_WR_string>
	//for(int i = 0; i < ret - 3; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftR); 
}
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <show_rgb>:

void show_rgb(uint8_t r, uint8_t g, uint8_t b) {
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	f8 2e       	mov	r15, r24
 378:	06 2f       	mov	r16, r22
 37a:	14 2f       	mov	r17, r20
	for(int i = 0; i < 14; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftL); 
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	04 c0       	rjmp	.+8      	; 0x38a <show_rgb+0x1e>
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
 388:	21 96       	adiw	r28, 0x01	; 1
 38a:	ce 30       	cpi	r28, 0x0E	; 14
 38c:	d1 05       	cpc	r29, r1
 38e:	cc f3       	brlt	.-14     	; 0x382 <show_rgb+0x16>
	show_number(r, 14);  
 390:	6e e0       	ldi	r22, 0x0E	; 14
 392:	8f 2d       	mov	r24, r15
 394:	0e 94 79 01 	call	0x2f2	; 0x2f2 <show_number>
	for(int i = 0; i < 2; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftR); 
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <show_rgb+0x3a>
 39e:	84 e1       	ldi	r24, 0x14	; 20
 3a0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
 3a4:	21 96       	adiw	r28, 0x01	; 1
 3a6:	c2 30       	cpi	r28, 0x02	; 2
 3a8:	d1 05       	cpc	r29, r1
 3aa:	cc f3       	brlt	.-14     	; 0x39e <show_rgb+0x32>
	show_number(g, 9);
 3ac:	69 e0       	ldi	r22, 0x09	; 9
 3ae:	80 2f       	mov	r24, r16
 3b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <show_number>
	for(int i = 0; i < 2; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftR); 
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <show_rgb+0x56>
 3ba:	84 e1       	ldi	r24, 0x14	; 20
 3bc:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
 3c0:	21 96       	adiw	r28, 0x01	; 1
 3c2:	c2 30       	cpi	r28, 0x02	; 2
 3c4:	d1 05       	cpc	r29, r1
 3c6:	cc f3       	brlt	.-14     	; 0x3ba <show_rgb+0x4e>
	show_number(b, 4);
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	81 2f       	mov	r24, r17
 3cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <show_number>
	for(int i = 0; i < 1; i++) LCD_CMD_8BIT(LCD_Cmd_ShiftR); 
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <show_rgb+0x72>
 3d6:	84 e1       	ldi	r24, 0x14	; 20
 3d8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_CMD_8BIT>
 3dc:	21 96       	adiw	r28, 0x01	; 1
 3de:	1c 16       	cp	r1, r28
 3e0:	1d 06       	cpc	r1, r29
 3e2:	cc f7       	brge	.-14     	; 0x3d6 <show_rgb+0x6a>
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	08 95       	ret

000003f0 <main>:

int main(void)
{
	LCD_inicialization();
 3f0:	0e 94 40 01 	call	0x280	; 0x280 <LCD_inicialization>
	LCD_WR_string("(000, 000, 000)"); 
 3f4:	80 e6       	ldi	r24, 0x60	; 96
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_WR_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	2f e3       	ldi	r18, 0x3F	; 63
 3fe:	8d e0       	ldi	r24, 0x0D	; 13
 400:	93 e0       	ldi	r25, 0x03	; 3
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	_delay_ms(1000);
	
	// PWM
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(0<<CS02)|(0<<CS01)|(1<<CS00);
 40e:	83 b7       	in	r24, 0x33	; 51
 410:	89 66       	ori	r24, 0x69	; 105
 412:	83 bf       	out	0x33, r24	; 51
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 414:	8f b5       	in	r24, 0x2f	; 47
 416:	82 6a       	ori	r24, 0xA2	; 162
 418:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);
 41a:	8e b5       	in	r24, 0x2e	; 46
 41c:	89 61       	ori	r24, 0x19	; 25
 41e:	8e bd       	out	0x2e, r24	; 46
	ICR1=255;
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	97 bd       	out	0x27, r25	; 39
 426:	86 bd       	out	0x26, r24	; 38
	
	DDRB|=(1<<3);
 428:	87 b3       	in	r24, 0x17	; 23
 42a:	88 60       	ori	r24, 0x08	; 8
 42c:	87 bb       	out	0x17, r24	; 23
	DDRD|=(1<<5)|(1<<4);
 42e:	81 b3       	in	r24, 0x11	; 17
 430:	80 63       	ori	r24, 0x30	; 48
 432:	81 bb       	out	0x11, r24	; 17
	
	OCR0=0;
 434:	1c be       	out	0x3c, r1	; 60
	OCR1A=0;
 436:	1b bc       	out	0x2b, r1	; 43
 438:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
 43a:	19 bc       	out	0x29, r1	; 41
 43c:	18 bc       	out	0x28, r1	; 40
	
	while (1)
	{
		for(int i = 0; i < 256; i+=16) {
 43e:	e1 2c       	mov	r14, r1
 440:	f1 2c       	mov	r15, r1
 442:	1e c0       	rjmp	.+60     	; 0x480 <__stack+0x21>
			for(int j = 0; j < 256; j+=16) {
				for(int k = 0; k < 256; k+=16) {
					show_rgb(i, j, k); 
 444:	4c 2f       	mov	r20, r28
 446:	60 2f       	mov	r22, r16
 448:	8e 2d       	mov	r24, r14
 44a:	0e 94 b6 01 	call	0x36c	; 0x36c <show_rgb>
					OCR0 = i; 
 44e:	ec be       	out	0x3c, r14	; 60
					OCR1A = j; 
 450:	1b bd       	out	0x2b, r17	; 43
 452:	0a bd       	out	0x2a, r16	; 42
					OCR1B = k; 
 454:	d9 bd       	out	0x29, r29	; 41
 456:	c8 bd       	out	0x28, r28	; 40
	
	while (1)
	{
		for(int i = 0; i < 256; i+=16) {
			for(int j = 0; j < 256; j+=16) {
				for(int k = 0; k < 256; k+=16) {
 458:	60 96       	adiw	r28, 0x10	; 16
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__stack+0x1>
 45c:	c0 e0       	ldi	r28, 0x00	; 0
 45e:	d0 e0       	ldi	r29, 0x00	; 0
 460:	cf 3f       	cpi	r28, 0xFF	; 255
 462:	d1 05       	cpc	r29, r1
 464:	79 f3       	breq	.-34     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
 466:	74 f3       	brlt	.-36     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
	OCR1B=0;
	
	while (1)
	{
		for(int i = 0; i < 256; i+=16) {
			for(int j = 0; j < 256; j+=16) {
 468:	00 5f       	subi	r16, 0xF0	; 240
 46a:	1f 4f       	sbci	r17, 0xFF	; 255
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__stack+0x13>
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	0f 3f       	cpi	r16, 0xFF	; 255
 474:	11 05       	cpc	r17, r1
 476:	91 f3       	breq	.-28     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 478:	8c f3       	brlt	.-30     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
	OCR1A=0;
	OCR1B=0;
	
	while (1)
	{
		for(int i = 0; i < 256; i+=16) {
 47a:	20 e1       	ldi	r18, 0x10	; 16
 47c:	e2 0e       	add	r14, r18
 47e:	f1 1c       	adc	r15, r1
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	e8 16       	cp	r14, r24
 484:	f1 04       	cpc	r15, r1
 486:	99 f3       	breq	.-26     	; 0x46e <__stack+0xf>
 488:	94 f3       	brlt	.-28     	; 0x46e <__stack+0xf>
 48a:	d9 cf       	rjmp	.-78     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>

0000048c <uno_en_bit>:
uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
 48c:	fc 01       	movw	r30, r24
 48e:	20 81       	ld	r18, Z
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <uno_en_bit+0xe>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <uno_en_bit+0xa>
}
 49e:	82 23       	and	r24, r18
 4a0:	08 95       	ret

000004a2 <saca_uno>:

void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
 4a2:	fc 01       	movw	r30, r24
 4a4:	40 81       	ld	r20, Z
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <saca_uno+0xe>
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <saca_uno+0xa>
 4b4:	24 2b       	or	r18, r20
 4b6:	20 83       	st	Z, r18
 4b8:	08 95       	ret

000004ba <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
 4ba:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
 4bc:	90 81       	ld	r25, Z
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <saca_cero+0xe>
 4c4:	22 0f       	add	r18, r18
 4c6:	33 1f       	adc	r19, r19
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <saca_cero+0xa>
 4cc:	20 95       	com	r18
 4ce:	29 23       	and	r18, r25
 4d0:	20 83       	st	Z, r18
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
