
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014cb  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000876  00000000  00000000  0000237d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000966  00000000  00000000  0000325e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  64:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <busy_flag>:
	saca_cero(&PORTLCD, E);
	busy_flag();
}

void busy_flag(void){
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo demás salida
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	80 7f       	andi	r24, 0xF0	; 240
  70:	8a bb       	out	0x1a, r24	; 26
	saca_cero(&PORTLCD,RS);// Instrucción
  72:	64 e0       	ldi	r22, 0x04	; 4
  74:	8b e3       	ldi	r24, 0x3B	; 59
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
  7c:	65 e0       	ldi	r22, 0x05	; 5
  7e:	8b e3       	ldi	r24, 0x3B	; 59
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
  86:	66 e0       	ldi	r22, 0x06	; 6
  88:	8b e3       	ldi	r24, 0x3B	; 59
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <busy_flag+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <busy_flag+0x2e>
  9a:	00 00       	nop
		_delay_ms(1);
		saca_cero(&PORTLCD,E);
  9c:	66 e0       	ldi	r22, 0x06	; 6
  9e:	8b e3       	ldi	r24, 0x3B	; 59
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
		if(uno_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para proteus, 0 para la vida real
  a6:	63 e0       	ldi	r22, 0x03	; 3
  a8:	89 e3       	ldi	r24, 0x39	; 57
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 0d 02 	call	0x41a	; 0x41a <uno_en_bit>
  b0:	81 11       	cpse	r24, r1
  b2:	15 c0       	rjmp	.+42     	; 0xde <busy_flag+0x72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <busy_flag+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <busy_flag+0x50>
		_delay_us(1);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
  bc:	66 e0       	ldi	r22, 0x06	; 6
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <busy_flag+0x5e>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <busy_flag+0x64>
  d0:	00 00       	nop
		_delay_ms(1);
		saca_cero(&PORTLCD,E);
  d2:	66 e0       	ldi	r22, 0x06	; 6
  d4:	8b e3       	ldi	r24, 0x3B	; 59
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	}
  dc:	d4 cf       	rjmp	.-88     	; 0x86 <busy_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
  de:	66 e0       	ldi	r22, 0x06	; 6
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
  e8:	8f ec       	ldi	r24, 0xCF	; 207
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <busy_flag+0x80>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <busy_flag+0x86>
  f2:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD,E);
  f4:	66 e0       	ldi	r22, 0x06	; 6
  f6:	8b e3       	ldi	r24, 0x3B	; 59
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	8b e3       	ldi	r24, 0x3B	; 59
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_cero(&PORTLCD,RW);
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	8b e3       	ldi	r24, 0x3B	; 59
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);// 0b0111_1111
 112:	8a b3       	in	r24, 0x1a	; 26
 114:	8f 67       	ori	r24, 0x7F	; 127
 116:	8a bb       	out	0x1a, r24	; 26
 118:	08 95       	ret

0000011a <LCD_WR_CHAR>:
	LCD_CMD_8BIT(LCD_Cmd_Clear); //limpia el display
	LCD_CMD_8BIT(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_CMD_8BIT(LCD_Cmd_OnsCsB); //Enciende el display
	LCD_CMD_8BIT(0b10000000); //Write data
}
void LCD_WR_CHAR(uint8_t dato){
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
	PORTLCD = dato>>4;
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	8b bb       	out	0x1b, r24	; 27
	saca_uno(&PORTLCD, RS);
 124:	64 e0       	ldi	r22, 0x04	; 4
 126:	8b e3       	ldi	r24, 0x3B	; 59
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
	saca_cero(&PORTLCD, RW);
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	8b e3       	ldi	r24, 0x3B	; 59
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_uno(&PORTLCD, E);
 138:	66 e0       	ldi	r22, 0x06	; 6
 13a:	8b e3       	ldi	r24, 0x3B	; 59
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_WR_CHAR+0x2c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_WR_CHAR+0x32>
 14c:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 14e:	66 e0       	ldi	r22, 0x06	; 6
 150:	8b e3       	ldi	r24, 0x3B	; 59
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	PORTLCD = dato & 0b00001111;
 158:	cf 70       	andi	r28, 0x0F	; 15
 15a:	cb bb       	out	0x1b, r28	; 27
	saca_uno(&PORTLCD, RS);
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	8b e3       	ldi	r24, 0x3B	; 59
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
	saca_cero(&PORTLCD, RW);
 166:	65 e0       	ldi	r22, 0x05	; 5
 168:	8b e3       	ldi	r24, 0x3B	; 59
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_uno(&PORTLCD, E);
 170:	66 e0       	ldi	r22, 0x06	; 6
 172:	8b e3       	ldi	r24, 0x3B	; 59
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
 17a:	8f ec       	ldi	r24, 0xCF	; 207
 17c:	97 e0       	ldi	r25, 0x07	; 7
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_WR_CHAR+0x64>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_WR_CHAR+0x6a>
 184:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 186:	66 e0       	ldi	r22, 0x06	; 6
 188:	8b e3       	ldi	r24, 0x3B	; 59
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	busy_flag();
 190:	0e 94 36 00 	call	0x6c	; 0x6c <busy_flag>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LCD_WR_string>:
#include "lcd.h"

void LCD_WR_string(volatile char *s){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	fc 01       	movw	r30, r24
	char c;
	while((c=*s++)){
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <LCD_WR_string+0xe>
		LCD_WR_CHAR(c);
 1a0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_WR_CHAR>
#include "lcd.h"

void LCD_WR_string(volatile char *s){
	char c;
	while((c=*s++)){
 1a4:	fe 01       	movw	r30, r28
 1a6:	ef 01       	movw	r28, r30
 1a8:	21 96       	adiw	r28, 0x01	; 1
 1aa:	80 81       	ld	r24, Z
 1ac:	81 11       	cpse	r24, r1
 1ae:	f8 cf       	rjmp	.-16     	; 0x1a0 <LCD_WR_string+0x8>
		LCD_WR_CHAR(c);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <LCD_CMD_4BIT>:
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
	busy_flag();
}
void LCD_CMD_4BIT(uint8_t instruction){
	PORTLCD=instruction;
 1b6:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD, RS);
 1b8:	64 e0       	ldi	r22, 0x04	; 4
 1ba:	8b e3       	ldi	r24, 0x3B	; 59
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_cero(&PORTLCD, RW);
 1c2:	65 e0       	ldi	r22, 0x05	; 5
 1c4:	8b e3       	ldi	r24, 0x3B	; 59
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_uno(&PORTLCD, E);
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
 1d6:	8f e1       	ldi	r24, 0x1F	; 31
 1d8:	9e e4       	ldi	r25, 0x4E	; 78
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_CMD_4BIT+0x24>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_CMD_4BIT+0x2a>
 1e0:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD, E);
 1e2:	66 e0       	ldi	r22, 0x06	; 6
 1e4:	8b e3       	ldi	r24, 0x3B	; 59
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	busy_flag();
 1ec:	0e 94 36 00 	call	0x6c	; 0x6c <busy_flag>
 1f0:	08 95       	ret

000001f2 <LCD_CMD_8BIT>:
}
void LCD_CMD_8BIT(uint8_t instruction){
 1f2:	cf 93       	push	r28
 1f4:	c8 2f       	mov	r28, r24
	// 0bxxxx_yyyy = VAR;
	// var = var >> 4;
	//var = 0b0000_xxxx;
	
	//Parte más significativa
	PORTLCD = instruction >> 4;
 1f6:	82 95       	swap	r24
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD, RS);
 1fc:	64 e0       	ldi	r22, 0x04	; 4
 1fe:	8b e3       	ldi	r24, 0x3B	; 59
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_cero(&PORTLCD, RW);
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	8b e3       	ldi	r24, 0x3B	; 59
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_uno(&PORTLCD, E);
 210:	66 e0       	ldi	r22, 0x06	; 6
 212:	8b e3       	ldi	r24, 0x3B	; 59
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 226:	66 e0       	ldi	r22, 0x06	; 6
 228:	8b e3       	ldi	r24, 0x3B	; 59
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	
	//Parte menos significativa
	PORTLCD = instruction & 0b00001111;
 230:	cf 70       	andi	r28, 0x0F	; 15
 232:	cb bb       	out	0x1b, r28	; 27
	saca_cero(&PORTLCD, RS);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8b e3       	ldi	r24, 0x3B	; 59
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_cero(&PORTLCD, RW);
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	8b e3       	ldi	r24, 0x3B	; 59
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	saca_uno(&PORTLCD, E);
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	8b e3       	ldi	r24, 0x3B	; 59
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 18 02 	call	0x430	; 0x430 <saca_uno>
 252:	8f ec       	ldi	r24, 0xCF	; 207
 254:	97 e0       	ldi	r25, 0x07	; 7
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 25c:	00 00       	nop
	_delay_ms(1);
	saca_cero(&PORTLCD, E);
 25e:	66 e0       	ldi	r22, 0x06	; 6
 260:	8b e3       	ldi	r24, 0x3B	; 59
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 24 02 	call	0x448	; 0x448 <saca_cero>
	busy_flag();
 268:	0e 94 36 00 	call	0x6c	; 0x6c <busy_flag>
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <LCD_inicialization>:
		LCD_WR_CHAR(c);
	}
}

void LCD_inicialization(void){
	DDRLCD = 0b01111111; //0b0111_1111;
 270:	8f e7       	ldi	r24, 0x7F	; 127
 272:	8a bb       	out	0x1a, r24	; 26
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9c e7       	ldi	r25, 0x7C	; 124
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_inicialization+0x8>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_inicialization+0xe>
 27e:	00 00       	nop
	//Basic LCD INIT
	_delay_ms(16);
	LCD_CMD_4BIT(0b00000011);
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_CMD_4BIT>
 286:	8f ec       	ldi	r24, 0xCF	; 207
 288:	90 e2       	ldi	r25, 0x20	; 32
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_inicialization+0x1a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_inicialization+0x20>
 290:	00 00       	nop
	_delay_ms(4.2);
	LCD_CMD_4BIT(0b00000011);
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_CMD_4BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	87 ec       	ldi	r24, 0xC7	; 199
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_inicialization+0x2c>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_inicialization+0x32>
 2a2:	00 00       	nop
	_delay_us(100);
	LCD_CMD_4BIT(0b00000011);
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_CMD_4BIT>
 2aa:	87 ec       	ldi	r24, 0xC7	; 199
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_inicialization+0x3e>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_inicialization+0x44>
 2b4:	00 00       	nop
	_delay_us(100);
	LCD_CMD_4BIT(0b00000010);
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_CMD_4BIT>
 2bc:	87 ec       	ldi	r24, 0xC7	; 199
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_inicialization+0x50>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_inicialization+0x56>
 2c6:	00 00       	nop
	_delay_us(100);
	//Full LCD INIT
	LCD_CMD_8BIT(LCD_Cmd_Func2Lin); //4 Bits, número de líneas y tipo de letra
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_Off); //apaga el display
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_Clear); //limpia el display
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_ModeDnS); //Entry mode set ID S
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(LCD_Cmd_OnsCsB); //Enciende el display
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_CMD_8BIT>
	LCD_CMD_8BIT(0b10000000); //Write data
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_CMD_8BIT>
 2ec:	08 95       	ret

000002ee <show_number>:
	uint8_t req = (0x80 | reg); // command bit
	I2C_Write(req); 
	val = I2C_Read_Ack(); 
	I2C_Stop();
	return val;
}
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <show_number+0x6>
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <show_number+0x8>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	1c 82       	std	Y+4, r1	; 0x04
 2fc:	22 e0       	ldi	r18, 0x02	; 2
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	19 c0       	rjmp	.+50     	; 0x334 <show_number+0x46>
 302:	e1 e0       	ldi	r30, 0x01	; 1
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ec 0f       	add	r30, r28
 308:	fd 1f       	adc	r31, r29
 30a:	e2 0f       	add	r30, r18
 30c:	f3 1f       	adc	r31, r19
 30e:	9d ec       	ldi	r25, 0xCD	; 205
 310:	89 9f       	mul	r24, r25
 312:	91 2d       	mov	r25, r1
 314:	11 24       	eor	r1, r1
 316:	96 95       	lsr	r25
 318:	96 95       	lsr	r25
 31a:	96 95       	lsr	r25
 31c:	59 2f       	mov	r21, r25
 31e:	55 0f       	add	r21, r21
 320:	45 2f       	mov	r20, r21
 322:	44 0f       	add	r20, r20
 324:	44 0f       	add	r20, r20
 326:	45 0f       	add	r20, r21
 328:	84 1b       	sub	r24, r20
 32a:	80 5d       	subi	r24, 0xD0	; 208
 32c:	80 83       	st	Z, r24
 32e:	89 2f       	mov	r24, r25
 330:	21 50       	subi	r18, 0x01	; 1
 332:	31 09       	sbc	r19, r1
 334:	81 11       	cpse	r24, r1
 336:	e5 cf       	rjmp	.-54     	; 0x302 <show_number+0x14>
 338:	0a c0       	rjmp	.+20     	; 0x34e <show_number+0x60>
 33a:	e1 e0       	ldi	r30, 0x01	; 1
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	ec 0f       	add	r30, r28
 340:	fd 1f       	adc	r31, r29
 342:	e2 0f       	add	r30, r18
 344:	f3 1f       	adc	r31, r19
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	80 83       	st	Z, r24
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	31 09       	sbc	r19, r1
 34e:	33 23       	and	r19, r19
 350:	a4 f7       	brge	.-24     	; 0x33a <show_number+0x4c>
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_WR_string>
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <start_condition>:

void start_condition() {
	TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN); 
 368:	84 ea       	ldi	r24, 0xA4	; 164
 36a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT))); 
 36c:	06 b6       	in	r0, 0x36	; 54
 36e:	07 fe       	sbrs	r0, 7
 370:	fd cf       	rjmp	.-6      	; 0x36c <start_condition+0x4>
	uint8_t status = TWSR & 0xF8; 
 372:	81 b1       	in	r24, 0x01	; 1
 374:	08 95       	ret

00000376 <set_addr>:
	//show_number(status); 
}

void set_addr(uint8_t addr) {
	TWDR = addr; 
 376:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT)|(1 << TWEN);
 378:	84 e8       	ldi	r24, 0x84	; 132
 37a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT))) {
 37c:	06 b6       	in	r0, 0x36	; 54
 37e:	07 fe       	sbrs	r0, 7
 380:	fd cf       	rjmp	.-6      	; 0x37c <set_addr+0x6>
		//LCD_WR_CHAR('a'); 
	}
	//show_number(TWSR & 0xF8); 
}
 382:	08 95       	ret

00000384 <write_data>:

void write_data(uint8_t data) {
	TWDR = data; 
 384:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT)|(1 << TWEN); 
 386:	84 e8       	ldi	r24, 0x84	; 132
 388:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT))); 
 38a:	06 b6       	in	r0, 0x36	; 54
 38c:	07 fe       	sbrs	r0, 7
 38e:	fd cf       	rjmp	.-6      	; 0x38a <write_data+0x6>
	//show_number(TWSR & 0xF8); 
}
 390:	08 95       	ret

00000392 <stop_condition>:

void stop_condition() {
	TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO); 
 392:	84 e9       	ldi	r24, 0x94	; 148
 394:	86 bf       	out	0x36, r24	; 54
 396:	08 95       	ret

00000398 <read_nack>:
}

uint8_t read_nack() {
	TWCR=(1<<TWEN)|(1<<TWINT);
 398:	84 e8       	ldi	r24, 0x84	; 132
 39a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 39c:	06 b6       	in	r0, 0x36	; 54
 39e:	07 fe       	sbrs	r0, 7
 3a0:	fd cf       	rjmp	.-6      	; 0x39c <read_nack+0x4>
	return TWDR; 
 3a2:	83 b1       	in	r24, 0x03	; 3
}
 3a4:	08 95       	ret

000003a6 <read_cmd_8>:

uint8_t read_cmd_8(uint8_t cmd) {
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
	start_condition(); 
 3aa:	0e 94 b4 01 	call	0x368	; 0x368 <start_condition>
	set_addr(PCS_WRITE_ADDR); 
 3ae:	82 e5       	ldi	r24, 0x52	; 82
 3b0:	0e 94 bb 01 	call	0x376	; 0x376 <set_addr>
	write_data((0x80 | cmd));	// mask with command byte
 3b4:	8c 2f       	mov	r24, r28
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	0e 94 c2 01 	call	0x384	; 0x384 <write_data>
	start_condition();			// repeated start
 3bc:	0e 94 b4 01 	call	0x368	; 0x368 <start_condition>
	set_addr(PCS_READ_ADDR); 
 3c0:	83 e5       	ldi	r24, 0x53	; 83
 3c2:	0e 94 bb 01 	call	0x376	; 0x376 <set_addr>
	uint8_t ans = read_nack();
 3c6:	0e 94 cc 01 	call	0x398	; 0x398 <read_nack>
 3ca:	c8 2f       	mov	r28, r24
	stop_condition(); 
 3cc:	0e 94 c9 01 	call	0x392	; 0x392 <stop_condition>
	return ans; 
}
 3d0:	8c 2f       	mov	r24, r28
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <main>:

int main(void)
{
	// LCD
	LCD_inicialization();
 3d6:	0e 94 38 01 	call	0x270	; 0x270 <LCD_inicialization>
	//LCD_WR_string("(000, 000, 000)"); 
	
	// PWM
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(0<<CS02)|(0<<CS01)|(1<<CS00);
 3da:	83 b7       	in	r24, 0x33	; 51
 3dc:	89 66       	ori	r24, 0x69	; 105
 3de:	83 bf       	out	0x33, r24	; 51
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 3e0:	8f b5       	in	r24, 0x2f	; 47
 3e2:	82 6a       	ori	r24, 0xA2	; 162
 3e4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);
 3e6:	8e b5       	in	r24, 0x2e	; 46
 3e8:	89 61       	ori	r24, 0x19	; 25
 3ea:	8e bd       	out	0x2e, r24	; 46
	ICR1=255;
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	97 bd       	out	0x27, r25	; 39
 3f2:	86 bd       	out	0x26, r24	; 38
	
	DDRB|=(1<<3);
 3f4:	27 b3       	in	r18, 0x17	; 23
 3f6:	28 60       	ori	r18, 0x08	; 8
 3f8:	27 bb       	out	0x17, r18	; 23
	DDRD|=(1<<5)|(1<<4);
 3fa:	21 b3       	in	r18, 0x11	; 17
 3fc:	20 63       	ori	r18, 0x30	; 48
 3fe:	21 bb       	out	0x11, r18	; 17
	
	OCR0=255;
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	2c bf       	out	0x3c, r18	; 60
	OCR1A=255;
 404:	9b bd       	out	0x2b, r25	; 43
 406:	8a bd       	out	0x2a, r24	; 42
	OCR1B=255;
 408:	99 bd       	out	0x29, r25	; 41
 40a:	88 bd       	out	0x28, r24	; 40
	
	// I2C - TCS34725
	PORTC = 255; 
 40c:	25 bb       	out	0x15, r18	; 21
	//while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
	//show_number(TWDR);
	//_delay_ms(1000); 
	//_delay_ms(1000); 
	//stop_condition();  
	show_number(read_cmd_8(0x12)); 
 40e:	82 e1       	ldi	r24, 0x12	; 18
 410:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <read_cmd_8>
 414:	0e 94 77 01 	call	0x2ee	; 0x2ee <show_number>
 418:	ff cf       	rjmp	.-2      	; 0x418 <__DATA_REGION_LENGTH__+0x18>

0000041a <uno_en_bit>:
uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
 41a:	fc 01       	movw	r30, r24
 41c:	20 81       	ld	r18, Z
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <uno_en_bit+0xe>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <uno_en_bit+0xa>
}
 42c:	82 23       	and	r24, r18
 42e:	08 95       	ret

00000430 <saca_uno>:

void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
 430:	fc 01       	movw	r30, r24
 432:	40 81       	ld	r20, Z
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <saca_uno+0xe>
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <saca_uno+0xa>
 442:	24 2b       	or	r18, r20
 444:	20 83       	st	Z, r18
 446:	08 95       	ret

00000448 <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
 448:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
 44a:	90 81       	ld	r25, Z
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <saca_cero+0xe>
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <saca_cero+0xa>
 45a:	20 95       	com	r18
 45c:	29 23       	and	r18, r25
 45e:	20 83       	st	Z, r18
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
